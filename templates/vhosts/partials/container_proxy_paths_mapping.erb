<% if @configuration['containers'].is_a?(Hash) && @configuration['containers'].any?{|c,v| v['route'].is_a?(Hash) }
  paths = @configuration['containers'].keys.inject({}) do |res,c|
    Hash(@configuration['containers'][c]['route']).each do |path,values|
      p = path =~ /^\// ? path : "/#{p}"
      if res[p]
        scope.call_function('fail', "Double defined path for #{name} and container #{c} to route")
      end
      res[p] = values
    end
    res
  end
  paths.keys.sort_by{|a| a.length }.reverse.each do |path|
    if (v = paths[path]).is_a?(Hash)
      port = v['port']
      target_path = v['target_path'] || path
      options = v['options']
    else
      port,target_path = v.to_s.split('/',2)
      options = nil
      target_path ||= path
    end

    d =  @domain == 'absent' ? @name : @domain
-%>
  ProxyPass <%= path %> unix:<%= @real_path %>/tmp/run/<%= port %>|http://<%= d.split('.',2).join("-#{port}") %><%= target_path %><% if options %> <%= options %><% end %>
  ProxyPassReverse <%= path %> unix:<%= @real_path %>/tmp/run/<%= port %>|http://<%= d.split('.',2).join("-#{port}") %><%= target_path %>
<% end
end -%>
